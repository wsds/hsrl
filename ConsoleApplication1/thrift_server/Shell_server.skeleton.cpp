// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Shell.h"
#include "Thrift_server.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/protocol/TJSONProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/THttpServer.h>
#include <thrift/transport/TWebsocketTransport.h>
#include <thrift/server/TServerEventHandlerImpl.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::open;

//class ShellHandler : virtual public ShellIf {
//public:
//	ShellHandler() {
//		// Your initialization goes here
//	}
//
//	void shell(const std::string& query) {
//		// Your implementation goes here
//		printf("shell: %s\n", query.c_str());
//	}
//
//};

typedef TServerEventHandlerImpl<ShellClient> ShellClientHandler;
typedef TProcessorEventHandlerImpl<ShellClient> ShellProcessorHandler;

//int main(int argc, char **argv) {
//	TWinsockSingleton::create();
//	
//	int port = 9090;
//
//	startWebsocketServer(port);
//	
//	return 0;
//}

void open::startHttpServer(int port){
	TWinsockSingleton::create();

	shared_ptr<ShellHandler> handler(new ShellHandler());
	shared_ptr<TProcessor> processor(new ShellProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new THttpServerTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TJSONProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
}

void open::startWebsocketServer(int port){
	TWinsockSingleton::create();

	shared_ptr<ShellHandler> handler(new ShellHandler());
	shared_ptr<TProcessor> processor(new ShellProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new TWebsocketTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TJSONProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.setServerEventHandler(boost::shared_ptr<TServerEventHandler>(new ShellClientHandler()));
	processor->setEventHandler(boost::shared_ptr<TProcessorEventHandler>(new ShellProcessorHandler(server.getEventHandler())));

	server.serve();
}

void open::log(char* log){

}

