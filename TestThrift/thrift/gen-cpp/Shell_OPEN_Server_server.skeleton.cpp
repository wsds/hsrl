// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Shell_OPEN_Server.h"
#include "Shell_OPEN_Server_server.skeleton.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/protocol/TJSONProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/THttpServer.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::open;

class Shell_OPEN_ServerHandler : virtual public Shell_OPEN_ServerIf {
public:
	Shell_OPEN_ServerHandler() {
		// Your initialization goes here
	}

	void shell(const std::string& query) {
		// Your implementation goes here
		printf("shell %s\n", query.c_str());
	}

};

int server_main(int argc, char **argv) {
	TWinsockSingleton::create();
	int port = 9090;
	shared_ptr<Shell_OPEN_ServerHandler> handler(new Shell_OPEN_ServerHandler());
	shared_ptr<TProcessor> processor(new Shell_OPEN_ServerProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new THttpServerTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TJSONProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}

