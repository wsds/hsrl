/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Shell_H
#define Shell_H

#include <thrift/TDispatchProcessor.h>
#include "Shell_types.h"

namespace open {

class ShellIf {
 public:
  virtual ~ShellIf() {}
  virtual void shell(const std::string& query) = 0;
};

class ShellIfFactory {
 public:
  typedef ShellIf Handler;

  virtual ~ShellIfFactory() {}

  virtual ShellIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ShellIf* /* handler */) = 0;
};

class ShellIfSingletonFactory : virtual public ShellIfFactory {
 public:
  ShellIfSingletonFactory(const boost::shared_ptr<ShellIf>& iface) : iface_(iface) {}
  virtual ~ShellIfSingletonFactory() {}

  virtual ShellIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ShellIf* /* handler */) {}

 protected:
  boost::shared_ptr<ShellIf> iface_;
};

class ShellNull : virtual public ShellIf {
 public:
  virtual ~ShellNull() {}
  void shell(const std::string& /* query */) {
    return;
  }
};

typedef struct _Shell_shell_args__isset {
  _Shell_shell_args__isset() : query(false) {}
  bool query;
} _Shell_shell_args__isset;

class Shell_shell_args {
 public:

  Shell_shell_args() : query() {
  }

  virtual ~Shell_shell_args() throw() {}

  std::string query;

  _Shell_shell_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const Shell_shell_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const Shell_shell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Shell_shell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Shell_shell_pargs {
 public:


  virtual ~Shell_shell_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Shell_shell_result {
 public:

  Shell_shell_result() {
  }

  virtual ~Shell_shell_result() throw() {}


  bool operator == (const Shell_shell_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Shell_shell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Shell_shell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Shell_shell_presult {
 public:


  virtual ~Shell_shell_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ShellClient : virtual public ShellIf {
 public:
  ShellClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ShellClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void shell(const std::string& query);
  void send_shell(const std::string& query);
  void recv_shell();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ShellProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ShellIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ShellProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_shell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ShellProcessor(boost::shared_ptr<ShellIf> iface) :
    iface_(iface) {
    processMap_["shell"] = &ShellProcessor::process_shell;
  }

  virtual ~ShellProcessor() {}
};

class ShellProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ShellProcessorFactory(const ::boost::shared_ptr< ShellIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ShellIfFactory > handlerFactory_;
};

class ShellMultiface : virtual public ShellIf {
 public:
  ShellMultiface(std::vector<boost::shared_ptr<ShellIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ShellMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ShellIf> > ifaces_;
  ShellMultiface() {}
  void add(boost::shared_ptr<ShellIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void shell(const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shell(query);
    }
    ifaces_[i]->shell(query);
  }

};

} // namespace

#endif
